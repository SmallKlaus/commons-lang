name: SonarQube Historical Analysis (Decoupled)

on:
  workflow_dispatch:
    inputs:
      tagsToScan:
        description: 'Comma-separated Git tags to scan (e.g., v1.0.0,v1.1.0,v1.2.0)'
        required: true
        type: string

jobs:
  # Job 1: Checks out the repo once to prepare a list of tags and their dates
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix_json }}
    steps:
      - name: Checkout full repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to read tags

      - name: Prepare matrix of tags and dates
        id: set-matrix
        run: |
          # This script creates a JSON array of objects, e.g., [{"tag":"v1.0","date":"2022-01-15"}, ...]
          tags_input="${{ github.event.inputs.tagsToScan }}"
          
          # This converts the comma-separated string to a newline-separated list and then version-sorts it.
          sorted_tags=$(echo "$tags_input" | sed 's/,/\n/g' | sort -V)

          json_objects=""
          for tag in $sorted_tags; do
            # Ensure the tag is not empty before processing
            if [ -n "$tag" ]; then
              date=$(git log -1 --format=%as "$tag")
              json_objects+=$(printf '{"tag":"%s","date":"%s"},' "$tag" "$date")
            fi
          done
          
          # Remove trailing comma and wrap in brackets to form a valid JSON array
          matrix_json=$(echo "[$json_objects]" | sed 's/,]$/]/')
          
          echo "matrix_json=$matrix_json" >> $GITHUB_OUTPUT

  # Job 2: Run all builds in parallel
  build-and-package:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # The matrix now iterates over the JSON objects created in the setup job
        item: ${{ fromJSON(needs.setup.outputs.matrix) }}
      fail-fast: false

    name: Build Tag ${{ matrix.item.tag }}
    steps:
      - name: Checkout code at version ${{ matrix.item.tag }}
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.item.tag }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
       # --- START: MODIFIED BUILD & RETRY LOGIC ---

      - name: Attempt initial build (with tests, parallel)
        id: initial-build
        # This tells the job not to fail immediately if this step has an error
        continue-on-error: true
        run: |
          # It runs tests and uses multiple threads
          mvn clean verify

      - name: Retry build in safe mode (if initial build failed)
        # This step ONLY runs if the "initial-build" step above failed
        if: steps.initial-build.outcome == 'failure'
        run: |
          echo "Initial build failed. Retrying in safe mode (skipping tests, single thread)..."
          # This is the "safe mode" fallback
          mvn clean verify -DskipTests=true -T 1
      
      - name: Upload build artifact
        # This step ONLY runs if one of the above build attempts succeeded
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-results-${{ replace(matrix.item.tag, '/', '-') }}
          path: . # Upload the entire project directory

  # Job 3: Submit all analyses sequentially
  submit-to-sonarcloud:
    needs: [setup, build-and-package] # Runs only after all builds are done
    runs-on: ubuntu-latest
    name: Sequential Sonar Submission

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into a parent 'artifacts' directory

      - name: Submit analyses in order
        run: |
          # Use jq to iterate through the JSON array from the setup job, ensuring order
          for item in $(echo '${{ needs.setup.outputs.matrix }}' | jq -r '.[] | @base64'); do
            _jq() {
             echo ${item} | base64 --decode | jq -r ${1}
            }

            tag=$(_jq '.tag')
            date=$(_jq '.date')

            #Sanitize the tag name to match the artifact name (replace / with -)
            sanitized_tag=${tag//\//-}

            echo "--- Submitting analysis for $tag (Artifact: build-results-$sanitized_tag) ---"

            # Use the sanitized name to find the correct directory
            project_path="artifacts/build-results-$sanitized_tag"
            
            # Check if the directory exists before proceeding
            if [ ! -d "$project_path" ]; then
              echo "ERROR: Artifact directory not found for tag $tag. Expected at $project_path"
              exit 1
            fi
            
            # Run sonar:sonar from the downloaded project path
            mvn -f "$project_path/pom.xml" sonar:sonar \
              -Dsonar.projectKey=smallklaus_commons-lang \
              -Dsonar.organization=smallklaus \
              -Dsonar.projectVersion=$tag \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.projectDate=$date
          done
